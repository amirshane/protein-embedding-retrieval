# -*- coding: utf-8 -*-
"""test_contextual_lenses_pooling.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QqKFn_NllxvCxPaQ24AsKZdISkjG01rr

# Imports
"""

import functools
import itertools
import os
import time

import flax
from flax import jax_utils
from flax import nn
from flax import optim

import jax
from jax import random
from jax import lax
import jax.nn
import jax.numpy as jnp

import numpy as np

import pandas as pd

import matplotlib.pyplot as plt

import scipy.stats

import sklearn.linear_model
import sklearn.metrics

import seaborn as sns

from absl.testing import parameterized

"""# Contextual lenses"""

def max_pool(x, padding_mask, rep_size=None):
  # Apply padding
  # Take maximum over sequence length

  if padding_mask is not None:
    x = x * padding_mask
    neg_mask = - 999999. * (1 - padding_mask)
    x = x + neg_mask
   
  rep = jnp.max(x, axis=-2)
   
  return rep


def mean_pool(x, padding_mask, rep_size=None):
  # Apply padding
  # Take mean over sequence length

  if padding_mask is not None:
    x = x * padding_mask
    rep = jnp.sum(x, axis=-2) / jnp.sum(padding_mask, axis=-2)
  else:
    rep = jnp.mean(x, axis=-2)

  return rep


def linear_max_pool(x, padding_mask, rep_size=256):
  # Apply linear transformation + ReLU
  # Apply padding
  # Take maximum over sequence length
  
  x = nn.Dense(
        x,
        rep_size,
        kernel_init=nn.initializers.xavier_uniform(),
        bias_init=nn.initializers.normal(stddev=1e-6))
  
  x = nn.relu(x)
  
  rep = max_pool(x, padding_mask, rep_size)
  
  return rep


def linear_mean_pool(x, padding_mask, rep_size=256):
  # Apply linear transformation + ReLU
  # Apply padding
  # Take mean over sequence length
  
  x = nn.Dense(
        x,
        rep_size,
        kernel_init=nn.initializers.xavier_uniform(),
        bias_init=nn.initializers.normal(stddev=1e-6))
  
  x = nn.relu(x)
  
  rep = mean_pool(x, padding_mask, rep_size)
  
  return rep

"""# Tests"""

test1 = {
          'testcase_name': 'test1',
          'x': jnp.array([[[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]],
                          [[0, -1, 2, -3], [4, -5, 6, -7], [8, -9, 10, -11]]]),
          'padding_mask' : None,
          'mean_pool_rep': jnp.array([[4, 5, 6, 7],
                                      [4, -5, 6, -7]]),
          'max_pool_rep': jnp.array([[8, 9, 10, 11],
                                     [8, -1, 10, -3]])
      }

test2 = {
          'testcase_name': 'test2',
          'x': jnp.array([[[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]],
                          [[0, -1, 2, -3], [4, -5, 6, -7], [8, -9, 10, -11]]]),
          'padding_mask' : jnp.array([[[1], [1], [1]]
                                      [1], [1], [1]]),
          'mean_pool_rep': jnp.array([[4, 5, 6, 7],
                                      [4, -5, 6, -7]]),
          'max_pool_rep': jnp.array([[8, 9, 10, 11],
                                     [8, -1, 10, -3]])
      }

test3 = {
          'testcase_name': 'test3',
          'x': jnp.array([[[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]],
                          [[0, -1, 2, -3], [4, -5, 6, -7], [8, -9, 10, -11]]]),
          'padding_mask' : jnp.array([[[1], [1], [1]], 
                                      [[1], [1], [0]]]),
          'mean_pool_rep': jnp.array([[4, 5, 6, 7],
                                      [2, -3, 4, -5]]),
          'max_pool_rep': jnp.array([[8, 9, 10, 11],
                                     [4, -1, 6, -3]])
      }

test4 = {
          'testcase_name': 'test4',
          'x': jnp.array([[[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]],
                          [[0, -1, 2, -3], [4, -5, 6, -7], [8, -9, 10, -11]]]),
          'padding_mask' : jnp.array([[[1], [0], [1]], 
                                      [[0], [1], [0]]]),
          'mean_pool_rep': jnp.array([[4, 5, 6, 7],
                                      [4, -5, 6, -7]]),
          'max_pool_rep': jnp.array([[8, 9, 10, 11],
                                     [4, -5, 6, -7]])
      }

test5 = {
          'testcase_name': 'test5',
          'x': jnp.array([[[6, 2, -5], [1, -2, 4], [-3, -8, 0]],
                          [[-2, -7, 4], [10, -4, 5], [-1, 3, -3]]]),
          'padding_mask' : None,
          'mean_pool_rep': jnp.array([[4/3, -8/3, -1/3],
                                      [7/3, -8/3, 2]]),
          'max_pool_rep': jnp.array([[6, 2, 4],
                                     [10, 3, 5]])
      }

test6 = {
          'testcase_name': 'test6',
          'x': jnp.array([[[6, 2, -5], [1, -2, 4], [-3, -8, 0]],
                          [[-2, -7, 4], [10, -4, 5], [-1, 3, -3]]]),
          'padding_mask' : jnp.array([[[1], [1], [1]], 
                                      [[1], [1], [1]]]),
          'mean_pool_rep': jnp.array([[4/3, -8/3, -1/3],
                                      [7/3, -8/3, 2]]),
          'max_pool_rep': jnp.array([[6, 2, 4],
                                     [10, 3, 5]])
      }

test7 = {
          'testcase_name': 'test7',
          'x': jnp.array([[[6, 2, -5], [1, -2, 4], [-3, -8, 0]],
                          [[-2, -7, 4], [10, -4, 5], [-1, 3, -3]]]),
          'padding_mask' : jnp.array([[[0], [1], [1]], 
                                      [[1], [0], [0]]]),
          'mean_pool_rep': jnp.array([[-1, -5, 2],
                                      [-2, -7, 4]]),
          'max_pool_rep': jnp.array([[1, -2, 4],
                                     [-2, -7, 4]])
      }

test8 = {
          'testcase_name': 'test8',
          'x': jnp.array([[[6, 2, -5], [1, -2, 4], [-3, -8, 0]],
                          [[-2, -7, 4], [10, -4, 5], [-1, 3, -3]]]),
          'padding_mask' : jnp.array([[[1], [0], [1]], 
                                      [[1], [1], [0]]]),
          'mean_pool_rep': jnp.array([[3/2, -3, -5/2],
                                      [4, -11/2, 9/2]]),
          'max_pool_rep': jnp.array([[6, 2, 0],
                                     [10, -4, 5]])
      }

tests = (test1,
         test2,
         test3,
         test4,
         test5,
         test6,
         test7,
         test8)

class TestPooling(parameterized.TestCase):
  @parameterized.named_parameters(
      *tests
  )
  def test_mean_pool(self, x, padding_mask, mean_pool_rep, **unused_kwargs):
    self.assertTrue(jnp.array_equal(mean_pool(x, padding_mask), mean_pool_rep))

  @parameterized.named_parameters(
      *tests
  )
  def test_max_pool(self, x, padding_mask, max_pool_rep, **unused_kwargs):
    self.assertTrue(jnp.array_equal(max_pool(x, padding_mask), max_pool_rep))
  
  @parameterized.named_parameters(
      *tests
  )
  def test_max_pool_greater_than_mean_pool(self, x, padding_mask, **unused_kwargs):
    self.assertTrue((max_pool(x, padding_mask=None) >= mean_pool(x, padding_mask=None)).all())

